第一章 基础知识

    什么是为服务架构
     微服务源于Martin Flowler名为Microservices的博文，官方博客地址：http://martinfowle.com/articles/microservices.html
     
     概括来说，微服务是系统架构的一种设计风格，主旨将原本独立的系统拆分为多个小型服务，小型服务在各种独立进程中运行，服务之间通过基于HTTP的RESTful API
     进行通信协作。
    
      与单体系统的区别 ？
        传统架构中，项目可分为数据库、服务端、前端。初期，业务在一个应用中，方便测试、开发和部署。
        企业发展，业务模块增多，前端、后台业务需求更为广泛，单体应用变得臃肿。单体应用问题凸显，功能修改增多，频繁影响其他功能，单体应用中的功能模块使用
        场景、并发量、消耗资源类型各不同，且对资源利用有影响，难以控制。
        微服务将不同功能模块拆分为多个不同的服务，服务能够独立部署和拓展。每个服务都有独立的进程，部署上稳固的边界。易于管理，准确定位问题。
      
      如何实施微服务 ？
        微服务优点也伴随着新的问题。
          1.运维要求提高，需要维护的进程数增加。
          2.接口的一致性；服务拆分，业务逻辑没变。原有接口修改，该过之后，交互方式也需调整来适应。
          3.分布式的复杂性；拆分的各个服务，独立部署在各自进程，只靠通信来协作。环境问题需要在系统设计中着重考虑，网络延迟、分布式事务、异步消息等。
        
        微服务架构九大特性：
          1.服务组件化；需要对服务进行组件化分解
          2.按业务组织团队；微服务的团队拆分更加建议按业务线的方式拆分，减少服务内部产生的内耗，另外可以使团队边界变得更清晰。
          3.做产品的态度；不以交付为目标，以产品生命周期的态度负责。
          4.智能端点与哑管道；放弃粗粒度的通信协议，采用HTTP的RESTful API或轻量级的消息发送协议；采用类似RabbitMQ可靠的异步交换中间件。
          5.去中心化治理；采用轻量级契约定义接口，使得对技术平台的依赖降低。不同服务组件，可以特定选择合适技术平台。
          6.去中心化管理数据；每个服务都有各自数据库，即数据管理去中心化。
          7.基础设施自动化；自动化测试；自动化部署；
          8.容错设计；需快速检测故障源并自动恢复服务。每个服务中实现监控和日志记录的组件，比如服务状态、断路器状态、吞吐量、网络延迟等关键数据的仪表盘。
          9.演进式设计；在发展过程中，架构师需要将经常变动的或有时间效应的内容进行微服务处理，在变化过程中拆分服务。
      
      
    为什么选择SpringCloud
      许多框架只解决了微服务中的某一个问题，不像Spring Cloud是一个解决微服务架构实施的综合性解决框架，它整合了诸多被广泛实践和证明过的框架作为实施的
      基础部件，且在该体系基础上创建了一些非常优秀的边缘组件。
    
    Spring Cloud简介
      Spring Cloud是一个基于Spring Boot实现的微服务架构开发工具。它为微服务架构中涉及的配置管理、服务治理、断路器、智能路由、微代理、控制总线、全局
      锁、决策竞选、分布式会话和集群管理等操作提供了一种简单的开发方式。
      
      Spring Cloud包含子项目：
        Spring Cloud Config：配置管理工具，支持使用Git存储配置内容，可以使用它实现应用配置的外部化存储，并支持客户端配置信息刷新、加密解密配置内容等。
        
        Spring Cloud Netflix：核心组件，对多个Netflix OSS开源套件进行整合。
          Eureka：服务治理组件，包含服务注册中心、服务注册与发现机制进行整合。
          Hystrix：容错管理组件，实现断路器模式，帮助服务依赖中出现的延迟和为故障提供强大的容错能力。
          Ribbon：客户端负载均衡的服务调用组件。
          Feign：基于Ribbon和Hystrix的声明式服务调用组件。
          Zuul：网关组件，提供智能路由、访问过滤等功能。
        Spring Cloud Bus:事件、消息总线，用于传播集群中的状态变化或事件，以及触发后续处理，比如用动态刷新配置等。
        Spring Cloud Cluster：正对Zookeeper、Redis、Hazelcast、Consul的选举算法和通用状态模式的实现。
        Spring Cloud Cloudfoundry：与Privotal Cloudfoundry的整合支持。
        Spring Cloud Stream：通过Redis、Rabbit或者Kafka实现的消费微服务，可以通过简单的声明式模型来发送和接收消息。
        Spring Cloud AWS：用于简化整合Amazon Web Service的组件。
        Spring Cloud Security：安全工具包，提供在Zuul代理中对OAuth2客户端请求的中继器。
        Spring Cloud Sleuth：Spring Cloud应用的分布式跟踪实现，可以完美整合Zipkin。
        Spring Cloud ZooKeeper：基于ZooKeeper的服务发现与配置管理组件。
        Spring Cloud Starters：Spring Cloud的基础组件，它是基于Spring Boot风格项目的基础依赖模块。
        Spring Cloud CLI：用于在Groovy中快速创建Spring Cloud应用的Spring Boot CLI插件。
        ......
        
        
    
    
    版本说明
      由于Spring Cloud不像Spring社区其他一些项目那样相对独立，它是拥有诸多子项目的大型综合项目，可以说是对微服务架构解决方案的综合套件组合，其包含的
      各个项目也都独立进行着内容更新与迭代，各自维护着自己发布的版本号。Spring Cloud没有采用版本号的方式，而是通过命名的方式。
      这些版本的名字采用了伦敦地铁站的名字，根据字母表的顺序来对应版本的时间顺序。
      
      
      
      
    
    
    
